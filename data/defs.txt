void restart();                          ESP.restart();
void Watch(char *);                      add Watch (if not already added) for variable named char string
void dropWatch(char *);                  drop Watch for char string name if present
void stopDebug();                        stop Debug single step display
void Debug();                            start Debug single step display
void sprint(char *);                     Send char string to Serial Monitor
void analogWrite(int,int);               pin,value set pin analog out to value range 0-4095
int  analogRead();                       returns read of A0
int  test(int);                          simply retuns 1234 and does some Console Output
void oclear(void);                       clears OLED display, you still have to call odisplay to show changes
void oconsoleInit();                     must be called to start OLED console display
void oconsolePrintln(char *);            draw char string at current cursor x,y
void odisplay(void);                     update display
void odrawLine(int,int,int,int);         x1,y1,x2,y2
void odrawRect(int,int,int,int);         x,y,width,height
void odrawString(int,int,char *);        x,y in pixels,char string
void ofillRect(int,int,int,int);         x,y,width,height
void oprint(char *);                     display in OLED at current cursor position
void oprintln(char *);                   display in OLED at current cursor position with [CR]
void osetCursor(int,int);                x,y
void osetFontSize(int);                  allowed values 10=ArialMT_Plain_10 16=ArialMT_Plain_16 24=ArialMT_Plain_24
void osetPixel(int,int);                 x,y
void setConsoleOn(char);                 0 turns console output off for printf function, 1 turns console output on
void HFsetCursor(int,int);               x,y
void HFdraw(char,float,int);            char,size,color
void HFdrawRotated(int,int,char,float,int,float); xc,yx,char,size,color,angle 
void HFdrawStringRotated(int,int,float,int,float,char *);  x,y,radius,size,color,angle,char string
int  HFgetStringSize(char *,float);     char string,size -- returns length
void HFdrawString(int,int,float,int,char *);   x,y,size,color,char string
void HFdrawCenteredString(int,float,int,char *);   y,size,color,char string
void HFdrawStringOpaque(int,int,float,int,int,char *);   x,y,size,foreColor,backColor,char string
void HFsetFont(char *);                 font name -- allowed values are serif sans sansbold greek cursive
void HFsetStrokeDelay(int);              set delay between strokes normally 0 non zero make for character drawing animation on screen
void fontShow(void);                    runs a Hershey font demo
void scroll();                          scrolls scrollPixels vertically upward
void setScrollPixels(int);              scrollPixels -- sets scroll value independent of setTextSize
void clearBkp(int);                     line
void consoleAlert(char *);              send message char string in black on red to teh terminal
void consoleOut(char *);                char string to display on console \n are recognized and screen will scroll as necessary to show char string
void cat(char *,int);                   fileName,with_linenumbers
void TFT_draw(char *,int,int);          filename,x,y -- must be a Jpeg file
void TFT_drawCircle(int,int,int,int);   xc,yc,radius,color
void TFT_drawEllipse(short,short,short,short,short);   xc,yc,radiusx,radiusy,color
void TFT_drawLine(int,int,int,int,int); x1,y1,x2,y2,color
void TFT_drawRect(int,int,int,int,int); x,y,width,height,color
void TFT_drawRoundRect(int,int,int,int,int,int);   x,y,width,height,radius,color
void TFT_drawTriangle(int,int,int,int,int,int,int);   x1,y1,x2,y2,x3,y3,color
void TFT_fillCircle(int,int,int,int);   xc,yc,radius,color
void TFT_fillEllipse(short,short,short,short,short);   xc,yc,radiusx,radiusy,color
void TFT_fillTriangle(int,int,int,int,int,int,int);   x1,y1,x2,y2,x3,y3,color
void TFT_fillRect(int,int,int,int,int); x,y,width,height,color
void TFT_fillRoundRect(int,int,int,int,int,int);   x,y,width,height,radius,color
void TFT_fillScreen(int);               color
int  TFT_Gauge(float xc,float yc,float sang,float eang,float radius,float sval,float eval,int divisions,float increments,int color,char * fmt,char * valueFmt);
void TFT_Gauge_draw(int);               gauge#
void TFT_Gauge_drawDanger(int,float,float,int);   gauge#,startValue,endValue, color
void TFT_Gauge_drawDangerByValue(int,float,float,int);   gsuge#,startValue,endValue, color
void TFT_Gauge_dropGauges();            frees all TFT_Gauge storage
void TFT_Gauge_setPosition(int,float);  gauge#,value
int  TFT_HbarGraph(float x,float y,int width,int height,float sval,float eval,int divisions,float increments,int color,char * fmt,char * valueFmt
void TFT_HbarGraph_draw(int);           gauge#
void TFT_HbarGraph_dropGauges();        frees all HbarGraph gauge storage
void TFT_HbarGraph_setPosition(int,float);   gauge#,value
void TFT_invertDisplay(int);,           pass 0 for normal 1 for inverse
void TFT_print(char *);                 char string to print
void TFT_pushRect(int,int,int,int,short *);   startx,starty,width,height
void TFT_readRect(int,int,int,int,short *);   startx,starty,width,height
void TFT_setCursor(int,int);            x,y y increases from 0 at top of display
void TFT_setTextColor(int,int);         foreColor,backColor
void TFT_setTextSize(int);              size
int  TFT_VbarGraph(float x,float y,int width,int height,float sval,float eval,int divisions,float increments,int color,char * fmt,char * valueFmt
void TFT_VbarGraph_draw(int);           gauge#
void TFT_VbarGraph_dropGauges();        frees all VbarGraph gauge storage
void TFT_VbarGraph_setPosition(int,float);   gauge#,value
void screenCapture();                   sends TFT screen images to the Processing ScreenCapure sketch
int  sysTime();                         calls millis()
void servoAngle(int,float);             pin,angle
void setServoRange(int,float,float);    pin, min_millisec, max_millisec
void pwmServo(int,float);               pin,dutyCycle
void setServoReport(int);               1=on 0=off           
void setBkp(int);                       line
void ls();                              lists SPIFFS files and sizes
void SDB(int);                          0 to disable, 1 to enable
void drop(char *);                      name, drops interpreter object named name
void listSrc();                         lists current program source
void doLoop();                          runs the ESP32Program sketch loop function, which will keep your program responsive to web events
void defs();                            lists this file
void help();                            lists this file
int  isprime(int,int,int);              start,end,reportInterval
void delay(int);                        Arduino equiv delay(milliseconds);
void digitalWrite(int,int);             Arduino equiv digitalWrite(pin,value);
int  digitalRead(int);                  Arduino equiv int digitalRead(pin);
void pinMode(int,char *);               pin,OUTPUT or INPUT or INPUT_PULLUP
void BME_init();                        must be called before using the BME280 sensor
float BME_readPressure();               returns barametric pressure from BME280 sensor
float BME_readRH();                     returns relative humidity from BME280 sensor
float BME_readTemp();                   returns temp from BME280 sensor
void NEO_colorWipe(int,int);            color,delay
void NEO_fill(int,int,int);             color,first,count
void NEO_init(int,int);                 count,pin
void NEO_rainbow(int);                  delay
void NEO_setBrightness(int);            brightness
void NEO_setPixelColorRGB(int,int,int,int);   n,r,g,b
void NEO_setPixelColorRGBW(int,int,int,int,int);   n,r,g,b,w
void NEO_setPixelColor32(int,int);      n,color
void NEO_setup(int);                    brightness
void NEO_theaterChase(int,int);         color,delay
void NEO_theaterChaseRainbow(int);      delay
void ePaper_drawLine(int,int,int,int,int) x1,y1,x2,y2,color
void ePaper_drawRect(int,int,int,int,int) x,y,width,height,color -- 0 is black 0xffff is white
void ePaper_fillRect(int,int,int,int,int) x,y,width,height,color
void ePaper_init()                      initialize ePaper display
void ePaper_powerDown();                put the ePaper display in powerDown mode
void ePaper_println(char *);"           print char string
void ePaper_setCursor(int,int);         x,y
void ePaper_setTextColor(int);          color
void ePaper_update();                   refresh/update display