; PlatformIO Project Configuration File
;
; Build options: build flags, source filter
; Upload options: custom upload port, speed and extra flags
; Library options: dependencies, extra library storages
; Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

;完整的参考：https://github.com/schreibfaul1/ESP32-MiniWebRadio/blob/master/platformio.ini
;参考说明：https://docs.platformio.org/en/latest/projectconf/sections/env/index.html
;https://registry.platformio.org/platforms/platformio/espressif32
;https://registry.platformio.org/tools/platformio/framework-arduinoespressif32/installation
;

[env:esp32dev]
;extra_scripts = ./littlefsbuilder.py
;env.Replace (MKSPIFFSTOOL = env.get ("PROJECT_DIR") + '/mkSPIFFS.exe')

; platform后面带的版本号和arduino版本可查看arduino-esp网站https://github.com/espressif/arduino-esp32的release查看
; esp-idf 3.3版本对应的是1.0.x版本的arduino-esp32（最高1.0.6）
; esp-idf 4.4版本对应的是2.0.x版本的arduino-esp32（最高2.0.17）
; esp-idf 5.1版本对应的是3.0.x版本的arduino-esp32

; 查询：https://github.com/platformio/platform-espressif32/releases,可知道对应的idf版本，以及编译器版本
; platform = https://github.com/platformio/platform-espressif32.git#feature/arduino-upstream
; platform = espressif32                                 ;
 platform = espressif32 @ ~1.9.0                         ;
; platform = espressif32 @ ~3.3.5                        ;
; platform = espressif32 @ ~4.0                          ;
; platform = espressif32 @ ~4.4                          ;
; platform = espressif32 @ ~5.0                          ;
; platform = espressif32@~5.2                            ;
; platform = espressif32@~5.4                            ;
; platform = espressif32@~6.2                            ;
; platform = espressif32@~6.7                            ;

framework = arduino
;framework = arduino,espidf                              ;框架

board = esp32dev                                         ;用于普通ESP32-Wroom、Wrover芯片
; board =esp32-s3-devkitc-1                              ;ESP32-S3芯片
; board = esp32-s2-saola-1                               ;要选择platformio开发IDE里面有的型号，否则编译不了。
; board = esp-wrover-kit                                 ;ESP32-Wrover板子
; board =upesy_wrover

board_build.arduino.upstream_packages = no               ;设置为no可防止 PlatformIO 下载或使用任何上游包

;查找arunino-esp32的版本和esp-idf对应的版本，https://github.com/espressif/arduino-esp32/releases?q=1.0.6&expanded=true
;本项目在arduino-esp2.0.10和espidf=4.4.6下可编译正常，但是littlefs有问题，无法加载wifi数据。
platform_packages =
    ; toolchain-xtensa32 @ file://C:\Users\Administrator\.platformio\packages\1.22.0-97-gc752ad5-5.2.0\xtensa-esp32-elf   ;参考https://community.platformio.org/t/use-different-version-of-arduino-framework-on-espressif-platform/23669/6
    ; toolchain-xtensa32 
    ; toolchain-xtensa32 @ 2.80200.200226 
    ; toolchain-xtensa32@~2.80400.0
    ; xtensa-esp32-elf-gcc @1.22.0-97-gc752ad5-5.2.0
    ; xtensa-esp32-elf-gcc
    ; xtensa-esp-elf-gdb 12.1_20221002
    ; toolchain-gccarmnoneeabi @ https://dl.bintray.com/platformio/dl-packages/toolchain-gccarmnoneeabi-darwin_x86_64-1.90201.191206.tar.gz
    framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#1.0.6       ;最高1.0.6版本
    ; framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#1.0.6         ;最高1.0.6版本
    ; framework-arduinoespressif32 @ https://github.com/husarnet/arduino-esp32/releases/download/1.0.4-1/arduino-husarnet-esp32.zip
    ; framework-arduinoespressif32 @https://github.com/espressif/arduino-esp32/releases/download/1.0.6/esp32-1.0.6.zip
    ; framework-espidf @ https://github.com/espressif/esp-idf#v3.3.2
    ; framework-espidf @ https://github.com/espressif/esp-idf#v5.1
    ; toolchain-xtensa-esp32s2 @ 8.4.0+2021r2-patch5                                            ;指定esp32s2和riscv的编译器版本
    ; toolchain-xtensa-riscv32-esp @ 8.4.0+2021r2-patch3                                        ;指定esp32s2和riscv的编译器版本
    ; toolchain-xtensa32 @ ~2.50200.9;   
    ; toolchain-xtensa-esp32@8.4.0+2021r2-patch5
    ; toolchain-xtensa32 @ ~ 2.50200.9

; debug_tool = esp-prog
; upload_protocol = esp-prog
upload_protocol = esptool								 ;下载工具为esptool
; monitor_filters = esp32_exception_decoder, default       ;可以过滤或打印错误信息到串口调试助手    
monitor_filters = esp32_exception_decoder                ;可以过滤或打印错误信息到串口调试助手   

;lib_ldf_mode = deep+                                    ;在搜索库依赖关系时使用 "深度+" 模式
lib_ldf_mode = chain+

build_type = debug

build_flags =
    -DARDUINO=10819
    -D _GNU_SOURCE
    -D DEBUG                                            ; debug模式
    ;-D RELEASE                                         ; release模式
    -D CORE_DEBUG_LEVEL=5                               ; 0 None, 1 Error, 2 Warn, 3 Info, 4 Debug, 5 Verbose
    -Wno-unused-function 
    -Wno-unused-variable     
    -DHW_ESP32 
    -DBUFFER_SIZE=32 
    -DTIMER_DEBUG
    -DESP32=1
    -DARDUINO_ARCH_ESP32=1
    ; -std=c++17
    ; -std=gnu++17
    -std=gnu++11 
    -std=c++0x -lpthread

    ;如下是PSRAM的配置方式
	-DCONFIG_SPIRAM_ALLOW_BSS_SEG_EXTERNAL_MEMORY
    -DCONFIG_SPIRAM_ALLOW_STACK_EXTERNAL_MEMORY         ;使用外部 PSRAM 来扩展堆栈内存
	-DCONFIG_SPIRAM_TYPE=PSRAM							;添加到编译命令中，你告诉编译器和 ESP32 的开发框架，你的 ESP32 设备具有外部 PSRAM
	-DBOARD_HAS_PSRAM									;启用PSRAM,用于在代码中指示是否支持外部 PSRAM	  
    -mfix-esp32-psram-cache-issue                       ;使用外部 PSRAM 时，某些情况下可能会出现缓存问题，这个选项可以尝试修复这些问题,解释参考https://thingpulse.com/esp32-how-to-use-psram/
	-mfix-esp32-psram-cache-strategy=memw

    ; -v                                                  ; Enable verbose output
    ; -v, --verbose

    ; 如下是usb的调试方式
    ; -DARDUINO_USB_MODE=1
    ; -DARDUINO_USB_CDC_ON_BOOT=1                         ;ESP32-c3,C6启动的时候一CDC方式工作    

; upload_port=COM5
; monitor_port=COM5
monitor_speed = 115200
upload_speed = 921600

board_build.f_cpu = 240000000L
board_build.flash_freq=80M
board_build.flash_mode = qio
board_build.bootloader = dio

; board_build.flash_size=4MB
; board_build.spiram_mode=2
; board_upload.maximum_size = 3145728
; board_upload.flash_size = 4MB

;[env:custom_table]
; 查看如下链接：https://github.com/espressif/arduino-esp32/tree/master/tools/partitions
; board_build.partitions = huge_app.csv          ;3M No OTA 1MB SPIFFS
; board_build.partitions =min_SPIFFS.csv         ;1.9M with OTA 190K SPIFFS，这里分区表里面的spiffs可切换为LittleFS，所以不用管
; board_build.partitions =myPartition.csv        ;fatfs
; board_build.partitions =no_ota.csv

; board_build.filesystem = littlefs             ;使用LittleFS的正确方法

lib_ignore = 
    LittleFS_esp32

lib_deps =
    SPIFFS
    ;Wire          ;IIC for PCF8563芯片
    ;HTTPClient    ;和公司平台连接的时候如果用arduinohttpclient或wificlient有错误，主要是有前缀或后缀，换这个没问题    
    ;ArduinoJson
    ;AsyncMqttClient@~0.8.2
    ;knolleary/PubSubClient@2.8                      ;esp32芯片的mqtt库
	;https://github.com/binzume/esp32quickjs.git      ;esp32版本的javascript解析器